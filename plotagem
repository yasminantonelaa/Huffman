#include <stdio.h>
#include <stdlib.h>

#define TAMANHO_MAX 1000

// Fila de prioridade sem heap

typedef struct {
    int dados[TAMANHO_MAX];
    int tamanho;
} FilaSemHeap;

void inicializarFilaSemHeap(FilaSemHeap *fila) {
    fila->tamanho = 0;
}

void inserirFilaSemHeap(FilaSemHeap *fila, int valor) {
    int i = fila->tamanho - 1;
    while (i >= 0 && fila->dados[i] > valor) {
        fila->dados[i + 1] = fila->dados[i];
        i--;
    }
    fila->dados[i + 1] = valor;
    fila->tamanho++;
}

int buscarFilaSemHeap(FilaSemHeap *fila, int valor, int *comparacoes) {
    for (int i = 0; i < fila->tamanho; i++) {
        (*comparacoes)++;
        if (fila->dados[i] == valor)
            return i;
    }
    return -1;
}

// Fila de prioridade COM heap (mínimo)

typedef struct {
    int dados[TAMANHO_MAX];
    int tamanho;
} FilaComHeap;

void inicializarFilaComHeap(FilaComHeap *heap) {
    heap->tamanho = 0;
}

void trocar(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void subir(FilaComHeap *heap, int i, int *comparacoes) {
    while (i > 0) {
        int pai = (i - 1) / 2;
        (*comparacoes)++;
        if (heap->dados[i] >= heap->dados[pai])
            break;
        trocar(&heap->dados[i], &heap->dados[pai]);
        i = pai;
    }
}

void descer(FilaComHeap *heap, int i, int *comparacoes) {
    int menor = i;
    while (1) {
        int esquerda = 2 * i + 1;
        int direita = 2 * i + 2;

        if (esquerda < heap->tamanho) {
            (*comparacoes)++;
            if (heap->dados[esquerda] < heap->dados[menor])
                menor = esquerda;
        }
        if (direita < heap->tamanho) {
            (*comparacoes)++;
            if (heap->dados[direita] < heap->dados[menor])
                menor = direita;
        }

        if (menor != i) {
            trocar(&heap->dados[i], &heap->dados[menor]);
            i = menor;
        } else {
            break;
        }
    }
}

void inserirFilaComHeap(FilaComHeap *heap, int valor, int *comparacoes) {
    heap->dados[heap->tamanho] = valor;
    subir(heap, heap->tamanho, comparacoes);
    heap->tamanho++;
}

int extrairMin(FilaComHeap *heap, int *comparacoes) {
    if (heap->tamanho == 0)
        return -1;
    int minimo = heap->dados[0];
    heap->dados[0] = heap->dados[heap->tamanho - 1];
    heap->tamanho--;
    descer(heap, 0, comparacoes);
    return minimo;
}

int buscarHeapPorExtracao(FilaComHeap heap, int valor, int *comparacoes) {
    int extraido;
    while (heap.tamanho > 0) {
        extraido = extrairMin(&heap, comparacoes);
        if (extraido == valor)
            return 1;
    }
    return 0;
}


// Geração do CSV

void gerarCSVComparacoes() {
    FILE *arquivo = fopen("comparacoes.csv", "w");
    if (!arquivo) {
        printf("Erro ao criar o arquivo comparacoes.csv\n");
        return;
    }

    fprintf(arquivo, "Numero,FilaSemHeap,FilaComHeap\n");

    for (int i = 1; i <= 1000; i++) {
        // Fila sem heap
        FilaSemHeap filaSem;
        inicializarFilaSemHeap(&filaSem);
        for (int j = 1; j <= 1000; j++)
            inserirFilaSemHeap(&filaSem, j);

        int compSem = 0;
        buscarFilaSemHeap(&filaSem, i, &compSem);

        // Fila com heap
        FilaComHeap heapCom;
        inicializarFilaComHeap(&heapCom);
        int compCom = 0;
        for (int j = 1; j <= 1000; j++)
            inserirFilaComHeap(&heapCom, j, &compCom);
        buscarHeapPorExtracao(heapCom, i, &compCom);

        fprintf(arquivo, "%d,%d,%d\n", i, compSem, compCom);
    }

    fclose(arquivo);
    printf("\nArquivo comparacoes.csv gerado com sucesso!\n");
}


// Função principal

int main() {
    FilaSemHeap filaSem;
    FilaComHeap heapCom;
    inicializarFilaSemHeap(&filaSem);
    inicializarFilaComHeap(&heapCom);

    for (int i = 1; i <= 1000; i++) {
        inserirFilaSemHeap(&filaSem, i);
        int temp = 0;
        inserirFilaComHeap(&heapCom, i, &temp);
    }

    int numero;
    printf("Digite um número entre 1 e 1000: ");
    scanf("%d", &numero);
    if (numero < 1 || numero > 1000) {
        printf("Número inválido.\n");
        return 1;
    }

    int compSem = 0, compCom = 0;

    buscarFilaSemHeap(&filaSem, numero, &compSem);

    // copiando heap original (evita perder dados ao extrair)
    FilaComHeap copiaHeap = heapCom;
    buscarHeapPorExtracao(copiaHeap, numero, &compCom);

    printf("\nNúmero buscado: %d\n", numero);
    printf("Comparações Fila SEM Heap: %d\n", compSem);
    printf("Comparações Fila COM Heap (log n): %d\n", compCom);

    gerarCSVComparacoes();

    return 0;
}
